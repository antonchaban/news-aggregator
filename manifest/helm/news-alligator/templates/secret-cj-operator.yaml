apiVersion: v1
kind: Secret
metadata:
  name: ecr-registry-helper-secrets
  namespace: operator-system
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
stringData:
  AWS_SECRET_ACCESS_KEY: "{{ .Values.aws.secretAccessKey }}"
  AWS_ACCESS_KEY_ID: "{{ .Values.aws.accessKeyId }}"
  AWS_ACCOUNT: "{{ .Values.aws.accountId }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecr-registry-helper-cm
  namespace: operator-system
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  AWS_REGION: "{{ .Values.aws.region }}"
  DOCKER_SECRET_NAME: "{{ .Values.ecrOperatorSecretName }}"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-registry-helper
  namespace: operator-system
spec:
  schedule: "0 */10 * * *"
  successfulJobsHistoryLimit: 3
  suspend: false
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: sa-for-operator-system
          containers:
            - name: ecr-registry-helper
              image: odaniait/aws-kubectl:latest
              imagePullPolicy: IfNotPresent
              envFrom:
                - secretRef:
                    name: ecr-registry-helper-secrets
                - configMapRef:
                    name: ecr-registry-helper-cm
              command:
                - /bin/sh
                - -c
                - |-
                  ECR_TOKEN=`aws ecr get-login-password --region ${AWS_REGION}`
                  NAMESPACE_NAME=operator-system
                  kubectl delete secret --ignore-not-found $DOCKER_SECRET_NAME -n $NAMESPACE_NAME
                  kubectl create secret docker-registry $DOCKER_SECRET_NAME \
                  --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com \
                  --docker-username=AWS \
                  --docker-password="${ECR_TOKEN}" \
                  --namespace=$NAMESPACE_NAME
                  echo "Secret was successfully updated at $(date)"
          restartPolicy: Never
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-for-operator-system
  namespace: operator-system
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: operator-system
  name: role-full-access-to-secrets
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["{{ .Values.ecrOperatorSecretName }}"]
    verbs: ["delete"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: operator-system-role-binding
  namespace: operator-system
subjects:
  - kind: ServiceAccount
    name: sa-for-operator-system
    namespace: operator-system
    apiGroup: ""
roleRef:
  kind: Role
  name: role-full-access-to-secrets
  apiGroup: ""
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ecr-registry-helper-startup
  namespace: operator-system
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: sa-for-operator-system
      containers:
        - name: ecr-registry-helper
          image: odaniait/aws-kubectl:latest
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: ecr-registry-helper-secrets
            - configMapRef:
                name: ecr-registry-helper-cm
          command:
            - /bin/sh
            - -c
            - |-
              ECR_TOKEN=`aws ecr get-login-password --region ${AWS_REGION}`
              NAMESPACE_NAME=news-alligator
              kubectl delete secret --ignore-not-found $DOCKER_SECRET_NAME -n $NAMESPACE_NAME
              kubectl create secret docker-registry $DOCKER_SECRET_NAME \
              --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com \
              --docker-username=AWS \
              --docker-password="${ECR_TOKEN}" \
              --namespace=$NAMESPACE_NAME
              echo "Secret was successfully updated at $(date)"
      restartPolicy: Never
  backoffLimit: 1
