version: '3'

vars:
  ACCESS_KEY_ID: '{{.ACCESS_KEY_ID | default ""}}'
  SECRET_ACCESS_KEY: '{{.SECRET_ACCESS_KEY | default ""}}'
  DB_USER: '{{.DB_USER | default "admin"}}'
  DB_PASSWORD: '{{.DB_PASSWORD | default "admin"}}'
  NAMESPACE: '{{.Namespace | default "news-alligator"}}'
  REGION: "us-west-2"
  ACCOUNT_ID: "406477933661"
  VERSION: '{{.VERSION}}'
#  DOCKER_IMAGE_NAME: "{{.ACCOUNT_ID}}.dkr.ecr.{{.REGION}}.amazonaws.com/antohachaban/news-alligator-web:{{.VERSION}}"
  DOCKER_IMAGE_NAME: "antohachaban/news-alligator-web:{{.VERSION}}"

includes:
  operator:
    taskfile: ./operator/Taskfile.yml
    dir: ./operator/
  fetcher:
    taskfile: ./fetcher/Taskfile.yml

tasks:
  build:
    cmds:
      - docker build . -f ./.Dockerfile -t {{.DOCKER_IMAGE_NAME}}
    desc: "Build the Docker image"

  run-docker:
    cmds:
      - docker run -d -v news-aggregator-backups:/root/backups -p {{.PORT}}:443 {{.DOCKER_IMAGE_NAME}}
    vars:
      PORT: '{{default "443" .PORT}}'
    desc: "Run the Docker container, example: task build PORT=443"

  stop-docker:
    cmds:
      - docker stop $(docker ps -q --filter ancestor={{.DOCKER_IMAGE_NAME}})
    desc: Stop the Docker container

  push-docker:
    cmds:
      - docker push {{.DOCKER_IMAGE_NAME}}
    desc: Push the Docker image to the registry

  test:
    deps: [mockgen]
    cmds:
      - go test -v ./...
    desc: Run tests

  pull-docker:
    cmds:
      - docker pull {{.DOCKER_IMAGE_NAME}}
    desc: Pull the Docker image from the registry

  swag-install:
    cmds:
      - go install github.com/swaggo/swag/cmd/swag@latest
    desc: Install swag

  swag:
    deps : [swag-install]
    cmds:
      - swag init -d cmd/news-alligator/web,pkg/handler/web,pkg/model -o ./cmd/news-alligator/web/docs
    desc: Initialize Swagger documentation

  run-local:
    env:
      PORT: 443
      SAVES_DIR: ./backups
      CERT_FILE: ./server.crt
      KEY_FILE: ./server.key
    cmds:
      - go build -o web.exe ./cmd/news-alligator/web
      - ./web.exe
    desc: Build and run the main Go file locally with environment variables

  install-mockgen:
    cmds:
      - go install github.com/golang/mock/mockgen@latest
      - go install go.uber.org/mock/mockgen@latest
    desc: Install mockgen
    internal: true

  mockgen:
    deps: [install-mockgen]
    desc: Run mockgen for generating mocks
    cmds:
      - go generate ./...

  install-postgres:
    cmds:
      - docker pull postgres
    desc: Pull the PostgreSQL Docker image
    internal: true

  format:
    cmds:
      - go fmt ./...
    desc: Format the code

  vet:
    cmds:
      - go vet ./...
    desc: Run go vet to check for issues

  tidy:
    cmds:
      - go mod tidy
    desc: Run go mod tidy to clean up dependencies

  build-go:
    cmds:
      - go build -o web.exe ./cmd/news-alligator/web
    desc: Build the Go source code

  all-checks:
    desc: Run format, vet, lint
    cmds:
      - task swag
      - task mockgen
      - task format
      - task vet
      - task tidy

  create-namespace:
    cmds:
      - |
        if ! kubectl get namespace news-alligator > /dev/null 2>&1; then
          kubectl create namespace news-alligator
          echo "Namespace news-alligator created."
        else
          echo "Namespace news-alligator already exists."
        fi
  
        if ! kubectl get namespace operator-system > /dev/null 2>&1; then
          kubectl create namespace operator-system
          echo "Namespace operator-system created."
        else
          echo "Namespace operator-system already exists."
        fi
    desc: Create Kubernetes namespaces if they do not exist
    internal: true

  apply-secret:
    deps: [ create-namespace ]
    cmds:
      - |
        POSTGRES_USER="admin"
        POSTGRES_PASSWORD="admin"
        POSTGRES_USER_BASE64=$(echo -n $POSTGRES_USER | base64)
        POSTGRES_PASSWORD_BASE64=$(echo -n $POSTGRES_PASSWORD | base64)
        export POSTGRES_USER_BASE64
        export POSTGRES_PASSWORD_BASE64
        envsubst < manifest/postgres/secret.yaml | kubectl apply -f -
    desc: Apply the PostgreSQL secret

  apply-postgres-manifests:
    deps: [ apply-secret ]
    cmds:
      - kubectl apply -f manifest/postgres/config-map.yaml
      - kubectl apply -f manifest/postgres/deployment.yaml
      - kubectl apply -f manifest/postgres/service.yaml
      - kubectl apply -f manifest/postgres/storage.yaml
    desc: Apply the Postgres manifests

  apply-web-aggregator:
    deps: [ apply-postgres-manifests ]
    cmds:
      - kubectl apply -f manifest/web-aggregator
    desc: Apply the Web Aggregator manifests

  apply-news-fetcher:
    deps: [ apply-web-aggregator ]
    cmds:
      - kubectl apply -f manifest/news-fetcher
    desc: Apply the News Fetcher manifests

  deploy:
    cmds:
      - task apply-news-fetcher
    desc: Deploy the entire application stack

  k8s-port-forward:
    cmds:
      - kubectl port-forward svc/news-alligator-service 443:8443 -n news-alligator
    desc: Port forward to the Kubernetes service

  undeploy-news-fetcher:
    cmds:
      - kubectl delete -f manifest/news-fetcher || echo "News Fetcher resources already deleted."
    desc: Delete the News Fetcher manifests

  undeploy-web-aggregator:
    deps: [undeploy-news-fetcher]
    cmds:
      - kubectl delete -f manifest/web-aggregator || echo "Web Aggregator resources already deleted."
    desc: Delete the Web Aggregator manifests

  undeploy-postgres-manifests:
    deps: [undeploy-web-aggregator]
    cmds:
      - kubectl delete -f manifest/postgres/config-map.yaml || echo "Postgres ConfigMap already deleted."
      - kubectl delete -f manifest/postgres/deployment.yaml || echo "Postgres Deployment already deleted."
      - kubectl delete -f manifest/postgres/service.yaml || echo "Postgres Service already deleted."
      - kubectl delete -f manifest/postgres/storage.yaml || echo "Postgres Storage already deleted."
    desc: Delete the Postgres manifests

  delete-secret:
    deps: [undeploy-postgres-manifests]
    cmds:
      - kubectl delete secret postgres-secret -n news-alligator || echo "Postgres secret already deleted."
    desc: Delete the PostgreSQL secret

  delete-namespace:
    deps: [delete-secret]
    cmds:
      - kubectl delete namespace news-alligator || echo "Namespace news-alligator already deleted."
    desc: Delete the Kubernetes namespace

  undeploy:
    cmds:
      - task delete-namespace
    desc: Undeploy the entire application stack


  createChart:
    desc: "Create Helm charts for all directories in manifest/helm"
    cmds:
      - |
        echo "Packaging Helm charts in manifest/helm/"
        for chart in manifest/helm/*/; do
          if [ -f "${chart}/Chart.yaml" ]; then
            echo "Packaging chart: ${chart}"
            helm package "$chart"
          else
            echo "No Chart.yaml found in: ${chart}"
          fi
        done
      - mkdir -p manifest/helm/charts
      - echo "Moving packaged charts to manifest/helm/charts/"
      - mv *.tgz manifest/helm/charts || echo "No charts found to move."

  installSecrets:
    deps:
      - createChart
    desc: "Install secrets for the application"
    cmds:
      - helm upgrade --install news-alligator oci://{{.ACCOUNT_ID}}.dkr.ecr.{{.REGION}}.amazonaws.com/antohachaban-secret-generator-chart --namespace {{.NAMESPACE}} --create-namespace --set aws.accessKeyId={{.ACCESS_KEY_ID}} --set aws.secretAccessKey={{.SECRET_ACCESS_KEY}}

  installChart:
    deps:
        - createChart
        - installSecrets
    desc: "Install Helm chart on Kubernetes cluster"
    cmds:
      - helm upgrade --install news-alligator oci://{{.ACCOUNT_ID}}.dkr.ecr.{{.REGION}}.amazonaws.com/antohachaban-news-alligator-chart --namespace {{.NAMESPACE}} --create-namespace --set aws.accessKeyId={{.ACCESS_KEY_ID}} --set aws.secretAccessKey={{.SECRET_ACCESS_KEY}} --set postgresql.auth.username={{.DB_USER}} --set postgresql.auth.password={{.DB_PASSWORD}}

  uninstallChart:
    desc: "Uninstall Helm chart from Kubernetes cluster"
    cmds:
      - helm uninstall news-alligator --namespace {{.Namespace}}
      - helm uninstall secret-generator --namespace {{.Namespace}}

#  AWS

  ecr-login:
    desc: "Login to AWS ECR"
    cmds:
      - aws ecr get-login-password --region {{.REGION}} | docker login --username AWS --password-stdin {{.ACCOUNT_ID}}.dkr.ecr.{{.REGION}}.amazonaws.com

  # Task to tag the Docker image with ECR repository URI
  docker-tag:
    desc: "Tag Docker image for ECR"
    cmds:
      - docker tag {{.IMAGE_NAME}} {{.ACCOUNT_ID}}.dkr.ecr.{{.REGION}}.amazonaws.com/{{.IMAGE_NAME}}

  # Task to push Docker image to ECR
  docker-push:
    desc: "Push Docker image to ECR"
    cmds:
      - docker push {{.ACCOUNT_ID}}.dkr.ecr.{{.REGION}}.amazonaws.com/{{.IMAGE_NAME}}

  # Combined task to build, tag, and push the image to ECR
  imgPushToEcr:
    deps:
      - ecr-login
      - docker-tag
      - docker-push
    desc: "Build, tag, and push Docker image to ECR"
    vars:
      IMAGE_NAME: ""

  # Tasks to push helm charts

  ecrHelmLogin:
    desc: "Login to AWS ECR"
    cmds:
      - aws ecr get-login-password --region {{.REGION}} | helm registry login --username AWS --password-stdin {{.ACCOUNT_ID}}.dkr.ecr.{{.REGION}}.amazonaws.com

  helmPushToEcr:
    deps:
      - ecrHelmLogin
      - createChart
    desc: "Push Helm charts to ECR"
    dir: manifest/helm/charts
    cmds:
      - |
        for chart in *.tgz; do
          if [ -f "$chart" ]; then
            echo "Pushing $chart to ECR"
            helm push "$chart" oci://{{.ACCOUNT_ID}}.dkr.ecr.{{.REGION}}.amazonaws.com
          else
            echo "No Helm charts found to push."
          fi
        done

  # Build and push all images
  build-all:
    cmds:
      - task operator:docker-build VERSION={{.VERSION}}
      - task build DOCKER_IMAGE_NAME={{.DOCKER_IMAGE_NAME}}
      - task fetcher:build VERSION={{.VERSION}}

  push-all:
    deps:
      - build-all
    cmds:
      - task operator:docker-push VERSION={{.VERSION}}
      - task push-docker DOCKER_IMAGE_NAME={{.DOCKER_IMAGE_NAME}}
      - task fetcher:push VERSION={{.VERSION}}