// Code generated by MockGen. DO NOT EDIT.
// Source: news-aggregator/pkg/service (interfaces: Article)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "news-aggregator/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArticle is a mock of Article interface.
type MockArticle struct {
	ctrl     *gomock.Controller
	recorder *MockArticleMockRecorder
}

// MockArticleMockRecorder is the mock recorder for MockArticle.
type MockArticleMockRecorder struct {
	mock *MockArticle
}

// NewMockArticle creates a new mock instance.
func NewMockArticle(ctrl *gomock.Controller) *MockArticle {
	mock := &MockArticle{ctrl: ctrl}
	mock.recorder = &MockArticleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticle) EXPECT() *MockArticleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticle) Create(arg0 model.Article) (model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockArticleMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockArticle)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockArticle) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArticleMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticle)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockArticle) GetAll() ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockArticleMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockArticle)(nil).GetAll))
}

// GetByDateInRange mocks base method.
func (m *MockArticle) GetByDateInRange(arg0, arg1 string) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDateInRange", arg0, arg1)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDateInRange indicates an expected call of GetByDateInRange.
func (mr *MockArticleMockRecorder) GetByDateInRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDateInRange", reflect.TypeOf((*MockArticle)(nil).GetByDateInRange), arg0, arg1)
}

// GetByKeyword mocks base method.
func (m *MockArticle) GetByKeyword(arg0 string) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKeyword", arg0)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKeyword indicates an expected call of GetByKeyword.
func (mr *MockArticleMockRecorder) GetByKeyword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeyword", reflect.TypeOf((*MockArticle)(nil).GetByKeyword), arg0)
}

// GetBySource mocks base method.
func (m *MockArticle) GetBySource(arg0 string) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySource", arg0)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySource indicates an expected call of GetBySource.
func (mr *MockArticleMockRecorder) GetBySource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySource", reflect.TypeOf((*MockArticle)(nil).GetBySource), arg0)
}

// SaveAll mocks base method.
func (m *MockArticle) SaveAll(arg0 []model.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockArticleMockRecorder) SaveAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockArticle)(nil).SaveAll), arg0)
}
