// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/antonchaban/news-aggregator/pkg/service (interfaces: SourceStorage)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_source.go -package=mocks github.com/antonchaban/news-aggregator/pkg/service SourceStorage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/antonchaban/news-aggregator/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSourceStorage is a mock of SourceStorage interface.
type MockSourceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSourceStorageMockRecorder
}

// MockSourceStorageMockRecorder is the mock recorder for MockSourceStorage.
type MockSourceStorageMockRecorder struct {
	mock *MockSourceStorage
}

// NewMockSourceStorage creates a new mock instance.
func NewMockSourceStorage(ctrl *gomock.Controller) *MockSourceStorage {
	mock := &MockSourceStorage{ctrl: ctrl}
	mock.recorder = &MockSourceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceStorage) EXPECT() *MockSourceStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSourceStorage) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSourceStorageMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSourceStorage)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockSourceStorage) GetAll() ([]model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSourceStorageMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSourceStorage)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockSourceStorage) GetByID(arg0 int) (model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSourceStorageMockRecorder) GetByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSourceStorage)(nil).GetByID), arg0)
}

// Save mocks base method.
func (m *MockSourceStorage) Save(arg0 model.Source) (model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockSourceStorageMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSourceStorage)(nil).Save), arg0)
}

// SaveAll mocks base method.
func (m *MockSourceStorage) SaveAll(arg0 []model.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockSourceStorageMockRecorder) SaveAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockSourceStorage)(nil).SaveAll), arg0)
}

// Update mocks base method.
func (m *MockSourceStorage) Update(arg0 int, arg1 model.Source) (model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSourceStorageMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSourceStorage)(nil).Update), arg0, arg1)
}
