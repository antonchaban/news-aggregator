AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template for EC2 instances, VPC, subnets, and security groups'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.medium
    ConstraintDescription: Must be a valid EC2 instance type.

Resources:
  antonvpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: antonvpc

  antonsubnet01a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref antonvpc
      CidrBlock: 10.0.0.0/26
      AvailabilityZone: us-west-2a
      Tags:
        - Key: Name
          Value: antonsubnet01a

  antonsubnet02b:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref antonvpc
      CidrBlock: 10.0.0.64/26
      AvailabilityZone: us-west-2b
      Tags:
        - Key: Name
          Value: antonsubnet02b

  antoninternetgateway:
    Type: AWS::EC2::InternetGateway

  antonvpcigattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref antonvpc
      InternetGatewayId: !Ref antoninternetgateway

  antonroutetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref antonvpc
      Tags:
        - Key: Name
          Value: antonroutetable

  antonroutes:
    Type: AWS::EC2::Route
    DependsOn: antonvpcigattachment
    Properties:
      RouteTableId: !Ref antonroutetable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref antoninternetgateway

  antonsubnet01aroutetableassociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref antonsubnet01a
      RouteTableId: !Ref antonroutetable

  antonsubnet02broutetableassociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref antonsubnet02b
      RouteTableId: !Ref antonroutetable

  antonserversecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS access from the client, SSH, and HTTP
      VpcId: !Ref antonvpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  antonclientsecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access and communication with server
      VpcId: !Ref antonvpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref antonserversecuritygroup

  antoninstanceprofile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref antoninstancerole

  antoninstancerole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: anton-instance-2-ecr-access
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  antonserverinstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-0bfddf4206f1fa7b9
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref antonsubnet01a
          GroupSet:
            - !Ref antonserversecuritygroup
      KeyName: anton
      IamInstanceProfile: !Ref antoninstanceprofile
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker
          service docker start
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 406477933661.dkr.ecr.us-west-2.amazonaws.com
          docker pull 406477933661.dkr.ecr.us-west-2.amazonaws.com/antohachaban/news-alligator-web:0.2
          docker run -d -v news-aggregator-backups:/root/backups -p 443:443 406477933661.dkr.ecr.us-west-2.amazonaws.com/antohachaban/news-alligator-web:0.2
      Tags:
        - Key: Name
          Value: antonserverinstance

  antonclientinstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-0bfddf4206f1fa7b9
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref antonsubnet02b
          GroupSet:
            - !Ref antonclientsecuritygroup
      KeyName: anton
      Tags:
        - Key: Name
          Value: antonclientinstance

Outputs:
  ServerInstancePublicIp:
    Description: Public IP of the newly created EC2 instance
    Value: !GetAtt antonserverinstance.PublicIp

  ClientInstancePublicIp:
    Description: Public IP of the newly created EC2 instance
    Value: !GetAtt antonclientinstance.PublicIp

  Subnet01a:
    Description: Subnet 01a
    Value: !Ref antonsubnet01a

  VPCId:
    Description: VPC ID
    Value: !Ref antonvpc

  ServerSecurityGroupId:
    Description: Security Group ID
    Value: !Ref antonserversecuritygroup

  ClientSecurityGroupId:
    Description: Security Group ID
    Value: !Ref antonclientsecuritygroup
